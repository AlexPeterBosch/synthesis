{
  "version": "1.0.0",
  "validation_rules": {
    "nlp": {
      "stopwords_count": {
        "rule": "Must have exactly 180 stopwords",
        "expected": 180,
        "critical": true
      },
      "processing_order": {
        "rule": "Stopwords MUST be removed BEFORE lemmatization",
        "steps": [
          "tokenization",
          "special_char_removal",
          "url_removal",
          "number_filtering",
          "stopwords_removal",
          "lemmatization",
          "entity_extraction"
        ],
        "critical": true
      },
      "ngram_weights": {
        "rule": "TWO-PASS algorithm with exact weights",
        "pass_1_bigram_weight": 3,
        "pass_2_distance_1_weight": 2,
        "pass_2_distance_2_weight": 1,
        "critical": true
      },
      "paragraph_breaks": {
        "rule": "Paragraph breaks (\\n\\n) MUST stop n-gram scanning",
        "delimiter": "\\n\\n",
        "critical": true
      }
    },
    "graph": {
      "edge_weights": {
        "rule": "ADDITIVE weighting with NO normalization",
        "calculation": "sum",
        "normalization": false,
        "critical": true
      }
    },
    "algorithms": {
      "louvain": {
        "resolution": {
          "rule": "Must use resolution = 1.0",
          "expected": 1.0,
          "critical": false
        },
        "weighted": {
          "rule": "Must use weighted = True",
          "expected": true,
          "critical": true
        },
        "stopping_criteria": {
          "rule": "Stop when ΔQ < 0.0001",
          "expected": 0.0001,
          "critical": false
        }
      },
      "forceatlas2": {
        "gravity": {
          "expected": 1.0,
          "critical": false
        },
        "scaling_ratio": {
          "expected": 20.0,
          "critical": false
        },
        "strong_gravity_mode": {
          "expected": true,
          "critical": false
        },
        "lin_log_mode": {
          "expected": false,
          "critical": false
        },
        "barnes_hut_optimize": {
          "expected": true,
          "critical": false
        },
        "barnes_hut_theta": {
          "expected": 1.2,
          "critical": false
        }
      },
      "betweenness": {
        "algorithm": {
          "rule": "Must use Brandes' algorithm",
          "expected": "brandes",
          "critical": true
        },
        "weighted": {
          "expected": true,
          "critical": true
        },
        "normalized": {
          "rule": "Must normalize to 0-1 range",
          "expected": true,
          "critical": true
        }
      },
      "modularity": {
        "formula": {
          "rule": "Must use Newman-Girvan weighted formula",
          "expected": "newman_girvan_weighted",
          "critical": true
        },
        "strong_threshold": {
          "rule": "Q > 0.4 indicates strong community structure",
          "expected": 0.4,
          "critical": true
        },
        "very_strong_threshold": {
          "expected": 0.7,
          "critical": false
        }
      }
    },
    "visualization": {
      "node_sizing": {
        "rule": "LINEAR scaling (NOT logarithmic)",
        "type": "linear",
        "formula": "5 + (bc_normalized * 35)",
        "min_pixels": 5,
        "max_pixels": 40,
        "ratio": "8:1",
        "critical": true
      },
      "node_labels": {
        "rule": "Show labels only for nodes > 20 pixels (top ~30%)",
        "threshold_pixels": 20,
        "percentage_shown": 30,
        "critical": true
      },
      "edge_thickness": {
        "formula": "log(weight + 1)",
        "critical": false
      }
    },
    "gaps": {
      "min_community_size": {
        "rule": "Communities must have at least 3 nodes",
        "expected": 3,
        "critical": true
      },
      "max_path_length": {
        "rule": "Gaps can be 2-6 hops apart",
        "min": 2,
        "max": 6,
        "critical": true
      },
      "density_threshold": {
        "rule": "Gap must have < 10% possible connections",
        "expected": 0.1,
        "critical": true
      },
      "max_size_ratio": {
        "rule": "Community sizes must not differ by more than 10:1",
        "expected": 10,
        "critical": true
      },
      "min_gap_score": {
        "rule": "Gap score must be > 0.4 to be valid",
        "expected": 0.4,
        "critical": true
      },
      "max_gaps_returned": {
        "rule": "Return maximum 3 gaps",
        "expected": 3,
        "critical": true
      },
      "filtering_stages": {
        "rule": "Must follow all 5 filtering stages in order",
        "stages": [
          "size_filters",
          "distance_filters",
          "density_filters",
          "gap_score_calculation",
          "semantic_validation"
        ],
        "critical": true
      }
    },
    "cognitive": {
      "biased_uniform": {
        "modularity_max": 0.4,
        "entropy_max": 0.5,
        "explore_ratio": 80
      },
      "focused_regular": {
        "modularity_max": 0.4,
        "density_min": 0.7,
        "explore_ratio": 30
      },
      "diversified_fractal": {
        "modularity_min": 0.4,
        "modularity_max": 0.7,
        "entropy_min": 0.4,
        "entropy_max": 0.7,
        "explore_ratio": 50,
        "optimal": true,
        "critical": true
      },
      "dispersed_complex": {
        "modularity_min": 0.7,
        "entropy_min": 0.7,
        "explore_ratio": 20
      },
      "immunity_formula": {
        "rule": "immunity = modularity × entropy",
        "formula": "modularity * entropy",
        "high_threshold": 0.28,
        "medium_threshold": 0.16,
        "critical": true
      }
    },
    "graphrag": {
      "subgraph_extraction": {
        "hops": {
          "rule": "Extract 2-hop neighborhood",
          "expected": 2,
          "critical": true
        },
        "method": {
          "expected": "neighborhood",
          "critical": true
        }
      },
      "context_components": {
        "top_concepts_count": 10,
        "top_relations_count": 15,
        "top_gaps_count": 5,
        "critical": true
      }
    },
    "performance": {
      "text_processing_500w": {
        "rule": "Must process 500 words in < 5 seconds",
        "max_seconds": 5,
        "critical": false
      },
      "graph_construction_500n": {
        "rule": "Must construct graph of 500 nodes in < 10 seconds",
        "max_seconds": 10,
        "critical": false
      },
      "louvain_1000n": {
        "rule": "Louvain on 1000 nodes in < 2 seconds",
        "max_seconds": 2,
        "critical": false
      },
      "forceatlas2_1000n": {
        "rule": "ForceAtlas2 on 1000 nodes in < 30 seconds",
        "max_seconds": 30,
        "critical": false
      },
      "betweenness_500n": {
        "rule": "Betweenness on 500 nodes in < 5 seconds",
        "max_seconds": 5,
        "critical": false
      },
      "graphrag_query": {
        "rule": "GraphRAG query response in < 3 seconds",
        "max_seconds": 3,
        "critical": false
      }
    }
  },
  "test_requirements": {
    "unit_tests": {
      "coverage_minimum": 80,
      "required_modules": [
        "nlp.text_processor",
        "nlp.ngram_generator",
        "graph.graph_builder",
        "graph.edge_calculator",
        "algorithms.louvain",
        "algorithms.betweenness",
        "gaps.gap_detector",
        "graphrag.query_processor"
      ]
    },
    "integration_tests": {
      "required_flows": [
        "text_to_graph_pipeline",
        "graph_to_visualization",
        "graphrag_query_flow"
      ]
    },
    "specification_tests": {
      "required_tests": [
        "test_ngram_weights",
        "test_node_sizing",
        "test_gap_thresholds",
        "test_edge_weight_accumulation",
        "test_cognitive_state_classification"
      ]
    }
  }
}

{
  "name": "GraphRAG Query Workflow",
  "nodes": [
    {
      "parameters": {},
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "graphrag-query"
    },
    {
      "parameters": {
        "jsCode": "// Extract query from webhook\nconst query = $input.item.json.query;\nconst context_id = $input.item.json.context_id;\n\nreturn {\n  query: query,\n  context_id: context_id\n};"
      },
      "name": "Extract Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM nodes WHERE context_id = {{ $json.context_id }}"
      },
      "name": "Get Graph Nodes",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Build context for AI\nconst nodes = $input.all();\n\n// Extract top concepts\nconst topConcepts = nodes\n  .sort((a, b) => b.json.properties.betweenness_centrality - a.json.properties.betweenness_centrality)\n  .slice(0, 10);\n\nconst context = {\n  query: $('Extract Query').item.json.query,\n  top_concepts: topConcepts.map(n => n.json.label),\n  graph_size: nodes.length\n};\n\nreturn { context: JSON.stringify(context) };"
      },
      "name": "Build Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "model": "claude-sonnet-4",
        "messages": [
          {
            "role": "user",
            "content": "Based on this graph context: {{ $json.context }}\n\nAnswer this question: {{ $('Extract Query').item.json.query }}"
          }
        ]
      },
      "name": "AI Agent (Claude)",
      "type": "n8n-nodes-base.aiAgent",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { answer: $json.output, query: $('Extract Query').item.json.query } }}"
      },
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{"node": "Extract Query", "type": "main", "index": 0}]]
    },
    "Extract Query": {
      "main": [[{"node": "Get Graph Nodes", "type": "main", "index": 0}]]
    },
    "Get Graph Nodes": {
      "main": [[{"node": "Build Context", "type": "main", "index": 0}]]
    },
    "Build Context": {
      "main": [[{"node": "AI Agent (Claude)", "type": "main", "index": 0}]]
    },
    "AI Agent (Claude)": {
      "main": [[{"node": "Respond", "type": "main", "index": 0}]]
    }
  }
}
